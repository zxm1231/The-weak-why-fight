%PDF-1.6%‚„œ”
1 0 obj<</Names 58 0 R/Outlines 5 0 R/Metadata 63 0 R/Pages 2 0 R/SpiderInfo 48 0 R/StructTreeRoot 7 0 R/Type/Catalog>>endobj2 0 obj<</Count 6/Type/Pages/Kids[11 0 R 17 0 R 19 0 R 21 0 R 25 0 R 27 0 R]>>endobj3 0 obj<</CreationDate(D:20061203063533+01'00')/Producer(Acrobat Web Capture 7.0)/ModDate(D:20061203063534+01'00')/Title(Programming Assignment 3: Implementing a Reliable Transport Protocol)>>endobj5 0 obj<</First 61 0 R/Count 2/Last 61 0 R/Type/Outlines>>endobj7 0 obj<</K 9 0 R/ParentTree 12 0 R/ParentTreeNextKey 6/Type/StructTreeRoot/ClassMap 8 0 R>>endobj8 0 obj<</SpdrArt<</O/WebCapture>>>>endobj9 0 obj<</K 10 0 R/P 7 0 R/S/Document>>endobj10 0 obj<</C/SpdrArt/K[0<</MCID 0/Pg 17 0 R/Type/MCR>><</MCID 0/Pg 19 0 R/Type/MCR>><</MCID 0/Pg 21 0 R/Type/MCR>><</MCID 0/Pg 25 0 R/Type/MCR>><</MCID 0/Pg 27 0 R/Type/MCR>>]/P 9 0 R/S/Article/T()/Pg 11 0 R>>endobj11 0 obj<</Annots 15 0 R/Parent 2 0 R/ID 54 0 R/StructParents 0/Contents 40 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 33 0 R/TT1 35 0 R/TT2 37 0 R/T1_0 32 0 R/T1_1 39 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj12 0 obj<</Nums[0 13 0 R 1 18 0 R 2 20 0 R 3 22 0 R 4 26 0 R 5 28 0 R]>>endobj13 0 obj[10 0 R]endobj14 0 obj<</Rect[556.737 312.911 592.162 326.411]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/figpa21.gif)/S/URI>>/Border[0 0 0]>>endobj15 0 obj[14 0 R 16 0 R]endobj16 0 obj<</Rect[10.0 295.911 52.3875 309.411]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/figpa21.gif)/S/URI>>/Border[0 0 0]>>endobj17 0 obj<</Parent 2 0 R/ID 54 0 R/StructParents 1/Contents 42 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 33 0 R/TT1 35 0 R/TT2 37 0 R/T1_0 32 0 R/T1_1 39 0 R/T1_2 41 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj18 0 obj[10 0 R]endobj19 0 obj<</Parent 2 0 R/ID 54 0 R/StructParents 2/Contents 43 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 33 0 R/TT1 35 0 R/TT2 37 0 R/T1_0 32 0 R/T1_1 41 0 R/T1_2 39 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj20 0 obj[10 0 R]endobj21 0 obj<</Annots 24 0 R/Parent 2 0 R/ID 54 0 R/StructParents 3/Contents 44 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 33 0 R/TT1 35 0 R/T1_0 32 0 R/T1_1 41 0 R/T1_2 39 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj22 0 obj[10 0 R]endobj23 0 obj<</Rect[148.937 409.178 423.375 422.678]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://gaia.cs.umass.edu/kurose/transport/prog2.c)/S/URI>>/Border[0 0 0]>>endobj24 0 obj[23 0 R]endobj25 0 obj<</Parent 2 0 R/ID 54 0 R/StructParents 4/Contents 45 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 33 0 R/TT1 35 0 R/T1_0 32 0 R/T1_1 41 0 R/T1_2 39 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj26 0 obj[10 0 R]endobj27 0 obj<</Annots 30 0 R/Parent 2 0 R/ID 54 0 R/StructParents 5/Contents 46 0 R/MediaBox[0.0 0.0 612.0 792.0]/Resources<</Font<</TT0 33 0 R/TT1 35 0 R/TT2 37 0 R/T1_0 32 0 R/T1_1 41 0 R>>/ProcSet[/PDF/Text]>>/Type/Page>>endobj28 0 obj[10 0 R]endobj29 0 obj<</Rect[564.737 171.876 596.013 185.376]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://gaia.cs.umass.edu/kurose/transport/programming_assignment_QA.htm)/S/URI>>/Border[0 0 0]>>endobj30 0 obj[29 0 R 31 0 R]endobj31 0 obj<</Rect[10.0 154.876 405.288 168.376]/Subtype/Link/BS<</S/S/W 0/Type/Border>>/A<</URI(http://gaia.cs.umass.edu/kurose/transport/programming_assignment_QA.htm)/S/URI>>/Border[0 0 0]>>endobj32 0 obj<</Subtype/Type1/BaseFont/Times-Roman/Encoding/WinAnsiEncoding/Type/Font>>endobj33 0 obj<</Subtype/TrueType/FontDescriptor 34 0 R/LastChar 255/Widths[750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 278 278 355 556 556 889 667 191 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 1015 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 667 778 722 667 611 722 667 944 667 667 611 278 278 278 469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 584 350 556 350 222 556 333 1000 556 556 333 1000 667 333 1000 350 611 350 350 222 222 333 333 350 556 1000 333 1000 500 333 944 350 500 667 278 333 556 556 556 556 260 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 537 278 333 333 365 556 834 834 834 611 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 500 556 556 556 556 278 278 278 278 556 556 556 556 556 556 556 549 611 556 556 556 556 500 556 500]/BaseFont/Arial/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj34 0 obj<</StemV 88/FontName/Arial/FontStretch/Normal/FontWeight 400/Flags 32/Descent -325/FontBBox[-665 -325 2000 1006]/Ascent 1006/FontFamily(Arial)/CapHeight 716/XHeight 519/Type/FontDescriptor/ItalicAngle 0>>endobj35 0 obj<</Subtype/TrueType/FontDescriptor 36 0 R/LastChar 255/Widths[750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 278 333 474 556 556 889 722 238 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 333 333 584 584 584 611 975 722 722 722 722 667 611 778 722 278 556 722 611 833 722 778 667 778 722 667 611 722 667 944 667 667 611 333 278 333 584 556 333 556 611 556 611 556 333 611 611 278 278 556 278 889 611 611 611 611 389 556 333 611 556 778 556 556 500 389 280 389 584 350 556 350 278 556 500 1000 556 556 333 1000 667 333 1000 350 611 350 350 278 278 500 500 350 556 1000 333 1000 556 333 944 350 500 667 278 333 556 556 556 556 280 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 556 278 333 333 365 556 834 834 834 611 722 722 722 722 722 722 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 556 556 556 556 556 278 278 278 278 611 611 611 611 611 611 611 549 611 611 611 611 611 556 611 556]/BaseFont/Arial,Bold/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj36 0 obj<</StemV 136/FontName/Arial,Bold/FontStretch/Normal/FontWeight 700/Flags 32/Descent -376/FontBBox[-628 -376 2000 1010]/Ascent 1010/FontFamily(Arial)/CapHeight 716/XHeight 519/Type/FontDescriptor/ItalicAngle 0>>endobj37 0 obj<</Subtype/TrueType/FontDescriptor 38 0 R/LastChar 255/Widths[750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 750 278 278 355 556 556 889 667 191 333 333 389 584 278 333 278 278 556 556 556 556 556 556 556 556 556 556 278 278 584 584 584 556 1015 667 667 722 722 667 611 778 722 278 500 667 556 833 722 778 667 778 722 667 611 722 667 944 667 667 611 278 278 278 469 556 333 556 556 500 556 556 278 556 556 222 222 500 222 833 556 556 556 556 333 500 278 556 500 722 500 500 500 334 260 334 584 350 556 350 222 556 333 1000 556 556 333 1000 667 333 1000 350 611 350 350 222 222 333 333 350 556 1000 333 1000 500 333 944 350 500 667 278 333 556 556 556 556 260 556 333 737 370 556 584 333 737 552 400 549 333 333 333 576 537 278 333 333 365 556 834 834 834 611 667 667 667 667 667 667 1000 722 667 667 667 667 278 278 278 278 722 722 778 778 778 778 778 584 778 722 722 722 722 667 667 611 556 556 556 556 556 556 889 500 556 556 556 556 278 278 278 278 556 556 556 556 556 556 556 549 611 556 556 556 556 500 556 500]/BaseFont/Arial,Italic/FirstChar 0/Encoding/WinAnsiEncoding/Type/Font>>endobj38 0 obj<</StemV 92/FontName/Arial,Italic/FontStretch/Normal/FontWeight 400/Flags 96/Descent -325/FontBBox[-517 -325 1082 998]/Ascent 998/FontFamily(Arial)/CapHeight 716/XHeight 519/Type/FontDescriptor/ItalicAngle -12>>endobj39 0 obj<</Subtype/Type1/BaseFont/Courier/Encoding/WinAnsiEncoding/Type/Font>>endobj40 0 obj<</Length 3928>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 778 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Programming Assignment 3: Implementing a Reliable Transport Protocol)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
0.655 0.486 0.275 rg
BT
/TT0 1 Tf
23.75 0 0 23.75 10 726.6742 Tm
(Programming Assignment 5: Implementing a Reliable )Tj
0 -1.2 TD
(Transport Protocol)Tj
/TT1 1 Tf
17.5 0 0 17.5 10 656.4975 Tm
(Overview)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 620.3022 Tm
(In this laboratory programming assignment, you will be writing the sendi\ng and receiving transport-level )Tj
T*
(code for implementing a simple reliable data transfer protocol. There ar\e two versions of this lab, the )Tj
T*
(Alternating-Bit-Protocol version and the  Go-Back-N version. This lab sh\ould be )Tj
/TT1 1 Tf
(fun)Tj
/TT0 1 Tf
( since your )Tj
0 -1.227 TD
(implementation will differ very little from what would be required in a \real-world situation. )Tj
0 -2.72 TD
(Since you probably don't have standalone machines \(with an OS that you \can modify\), your code will have )Tj
0 -1.2 TD
(to execute in a simulated hardware/software environment. However, the pr\ogramming interface provided )Tj
T*
(to your routines, i.e., the code that would call your entities from abov\e and from below is very close to )Tj
T*
(what is done in an actual UNIX environment. \(Indeed, the software inter\faces described in this )Tj
T*
(programming assignment are much more realistic that the infinite loop se\nders and receivers that many )Tj
T*
(texts describe\). Stopping/starting of timers are also simulated, and ti\mer interrupts will cause your timer )Tj
T*
(handling routine to be activated. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 413.1586 Tm
(The routines you will write)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 376.9634 Tm
(The procedures you will write are for the sending entity \(A\) and the r\eceiving entity \(B\). Only unidirectional )Tj
T*
(transfer of data \(from A to B\) is required. Of course, the B side will\ have to send packets to A to )Tj
T*
(acknowledge \(positively or negatively\) receipt of data. Your routines \are to be implemented in the form of )Tj
T*
(the procedures described below. These procedures will be called by \(and\ will call\) procedures that I have )Tj
T*
(written which emulate a network environment. The overall structure of th\e environment is shown in )Tj
ET
0 0 0.4 RG
0.6 w 10 M 0 j 0 J []0 d 
556.738 315.163 m
595.637 315.163 l
S
0 0 0.4 rg
BT
/TT0 1 Tf
12.5 0 0 12.5 556.7375 316.9634 Tm
(Figure )Tj
ET
10 298.163 m
52.387 298.163 l
S
BT
/TT0 1 Tf
12.5 0 0 12.5 10 299.9634 Tm
(Lab.3-1)Tj
0 0 0 rg
( \(structure of the emulated environment\): )Tj
0 -2.88 TD
(The unit of data passed between the upper layers and your protocols is a\ )Tj
/TT2 1 Tf
(message,)Tj
/TT0 1 Tf
( which is declared as: )Tj
/T1_1 1 Tf
14 0 0 14 10 228.5509 Tm
(struct msg {)Tj
0 -1.2 TD
(  char data[20];)Tj
T*
(  };)Tj
/TT0 1 Tf
12.5 0 0 12.5 10 160.5449 Tm
(This declaration, and all other data structure and emulator routines, as\ well as stub routines \(i.e., those )Tj
T*
(you are to complete\) are in the file, )Tj
/TT1 1 Tf
(prog2.c,)Tj
/TT0 1 Tf
( described later. Your sending entity will thus receive data in )Tj
0 -1.227 TD
(20-byte chunks from layer5; your receiving entity should deliver 20-byte\ chunks of correctly received data )Tj
0 -1.2 TD
(to layer5 at the receiving side. )Tj
0 -2.72 TD
(The unit of data passed between your routines and the network layer is t\he )Tj
/TT2 1 Tf
(packet,)Tj
/TT0 1 Tf
( which is declared as: )Tj
/T1_1 1 Tf
14 0 0 14 10 45.7936 Tm
(struct pkt {)Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 5 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html \(\1 of 6\)2006-12-3 6:35:33)Tj
ET
EMC 

endstreamendobj41 0 obj<</Subtype/Type1/BaseFont/ZapfDingbats/Type/Font>>endobj42 0 obj<</Length 4969>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 778 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Programming Assignment 3: Implementing a Reliable Transport Protocol)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
14 0 0 14 10 753.9082 Tm
(   int seqnum;)Tj
0 -1.2 TD
(   int acknum;)Tj
T*
(   int checksum;)Tj
T*
(   char payload[20];)Tj
T*
(    };)Tj
/TT0 1 Tf
12.5 0 0 12.5 10 652.3022 Tm
(Your routines will fill in the payload field from the message data passe\d down from layer5. The other )Tj
T*
(packet fields will be used by your protocols to insure reliable delivery\, as we've seen in class. )Tj
0 -2.72 TD
(The routines you will write are detailed below. As noted above, such pro\cedures in real-life would be part )Tj
0 -1.2 TD
(of the operating system, and would be called by other procedures in the \operating system. )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 554.2037 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 554.2037 Tm
(A_output\(message\), )Tj
/TT0 1 Tf
(where )Tj
/T1_1 1 Tf
(message)Tj
/TT0 1 Tf
( is a structure of type )Tj
/T1_1 1 Tf
(msg,)Tj
/TT0 1 Tf
( containing data to be sent to the )Tj
0 -1.227 TD
(B-side. This routine will be called whenever the upper layer at the send\ing side \(A\) has a message )Tj
0 -1.2 TD
(to send. It is the job of your protocol to insure that the data in such \a message is delivered in-order, )Tj
T*
(and correctly, to the receiving side upper layer. )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 474.7664 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 474.7664 Tm
(A_input\(packet\), )Tj
/TT0 1 Tf
(where )Tj
/T1_1 1 Tf
(packet)Tj
/TT0 1 Tf
( is a structure of type )Tj
/T1_1 1 Tf
(pkt. )Tj
/TT0 1 Tf
(This routine will be called whenever )Tj
0 -1.235 TD
(a packet sent from the B-side \(i.e., as a result of a )Tj
/T1_1 1 Tf
(tolayer3\(\))Tj
/TT0 1 Tf
( being done by a B-side )Tj
0 -1.208 TD
(procedure\) arrives at the A-side. )Tj
/T1_1 1 Tf
(packet)Tj
/TT0 1 Tf
( is the \(possibly corrupted\) packet sent from the B-side. )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 410.2305 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 410.2305 Tm
(A_timerinterrupt\(\)  )Tj
/TT0 1 Tf
(This routine will be called when A's timer expires \(thus generating a t\imer )Tj
0 -1.227 TD
(interrupt\). You'll probably want to use this routine to control the ret\ransmission of packets. See )Tj
/T1_1 1 Tf
0 -1.208 TD
(starttimer\(\))Tj
/TT0 1 Tf
( and )Tj
/T1_1 1 Tf
(stoptimer\(\))Tj
/TT0 1 Tf
( below for how the timer is started and stopped. )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 345.7932 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 345.7932 Tm
(A_init\(\) )Tj
/TT0 1 Tf
(This routine will be called once, before any of your other A-side routin\es are called. It can )Tj
0 -1.227 TD
(be used to do any required initialization. )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 296.3559 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 296.3559 Tm
(B_input\(packet\),)Tj
/TT0 1 Tf
(where )Tj
/T1_1 1 Tf
(packet)Tj
/TT0 1 Tf
( is a structure of type )Tj
/T1_1 1 Tf
(pkt. )Tj
/TT0 1 Tf
(This routine will be called whenever a )Tj
0 -1.235 TD
(packet sent from the A-side \(i.e., as a result of a )Tj
/T1_1 1 Tf
(tolayer3\(\))Tj
/TT0 1 Tf
( being done by a A-side procedure\) )Tj
0 -1.208 TD
(arrives at the B-side. )Tj
/T1_1 1 Tf
(packet)Tj
/TT0 1 Tf
( is the \(possibly corrupted\) packet sent from the A-side. )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 231.82 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 231.82 Tm
(B_init\(\) )Tj
/TT0 1 Tf
(This routine will be called once, before any of your other B-side routin\es are called. It can )Tj
0 -1.227 TD
(be used to do any required initialization. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 178.6764 Tm
(Software Interfaces)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 142.4812 Tm
(The procedures described above are the ones that you will write. I have \written the following routines )Tj
0 -1.2 TD
(which can be called by your routines: )Tj
/T1_2 1 Tf
6.25 0 0 6.25 36.3687 93.3827 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 93.3827 Tm
(starttimer\(calling_entity,increment\), )Tj
/TT0 1 Tf
(where )Tj
/T1_1 1 Tf
(calling_entity)Tj
/TT0 1 Tf
( is either 0 \(for starting the A-side )Tj
0 -1.235 TD
(timer\) or 1 \(for starting the B side timer\), and )Tj
/T1_1 1 Tf
(increment)Tj
/TT0 1 Tf
( is a )Tj
/TT2 1 Tf
(float)Tj
/TT0 1 Tf
( value indicating the amount of )Tj
0 -1.201 TD
(time that will pass before the timer interrupts. A's timer should only b\e started \(or stopped\) by A-)Tj
0 -1.2 TD
(side routines, and similarly for the B-side timer. To give you an idea o\f the appropriate increment )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 5 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html \(\2 of 6\)2006-12-3 6:35:33)Tj
ET
EMC 

endstreamendobj43 0 obj<</Length 5261>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 778 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Programming Assignment 3: Implementing a Reliable Transport Protocol)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
12.5 0 0 12.5 50 755.3022 Tm
(value to use: a packet sent into the network takes an average of 5 time \units to arrive at the other )Tj
0 -1.2 TD
(side when there are no other messages in the medium. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 706.2037 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 706.2037 Tm
(stoptimer\(calling_entity\), )Tj
/TT0 1 Tf
(where )Tj
/T1_2 1 Tf
(calling_entity)Tj
/TT0 1 Tf
( is either 0 \(for stopping the A-side timer\) or 1 )Tj
0 -1.227 TD
(\(for stopping the B side timer\). )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 656.7664 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 656.7664 Tm
(tolayer3\(calling_entity,packet\), )Tj
/TT0 1 Tf
(where )Tj
/T1_2 1 Tf
(calling_entity)Tj
/TT0 1 Tf
( is either 0 \(for the A-side send\) or 1 )Tj
0 -1.235 TD
(\(for the B side send\), and )Tj
/T1_2 1 Tf
(packet)Tj
/TT0 1 Tf
( is a structure of type )Tj
/T1_2 1 Tf
(pkt. )Tj
/TT0 1 Tf
(Calling this routine will cause the )Tj
0 -1.2 TD
(packet to be sent into the network, destined for the other entity. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 592.2305 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 592.2305 Tm
(tolayer5\(calling_entity,message\), )Tj
/TT0 1 Tf
(where )Tj
/T1_2 1 Tf
(calling_entity)Tj
/TT0 1 Tf
( is either 0 \(for A-side delivery to )Tj
0 -1.235 TD
(layer 5\) or 1 \(for B-side delivery to layer 5\), and )Tj
/T1_2 1 Tf
(message)Tj
/TT0 1 Tf
( is a structure of type )Tj
/T1_2 1 Tf
(msg.)Tj
/TT0 1 Tf
( With )Tj
0 -1.208 TD
(unidirectional data transfer, you would only be calling this with )Tj
/T1_2 1 Tf
(calling_entity)Tj
/TT0 1 Tf
( equal to 1 )Tj
0 -1.2 TD
(\(delivery to the B-side\). Calling this routine will cause data to be p\assed up to layer 5. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 508.89 Tm
(The simulated network environment)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 472.5962 Tm
(A call to procedure )Tj
/T1_2 1 Tf
(tolayer3\(\))Tj
/TT0 1 Tf
( sends packets into the medium \(i.e., into the network layer\). Your )Tj
0 -1.208 TD
(procedures )Tj
/T1_2 1 Tf
(A_input\(\))Tj
/TT0 1 Tf
( and )Tj
/T1_2 1 Tf
(B_input\(\))Tj
/TT0 1 Tf
( are called when a packet is to be delivered from the medium to )Tj
0 -1.2 TD
(your protocol layer. )Tj
0 -2.72 TD
(The medium is capable of corrupting and losing packets. It will not reor\der packets. When you compile )Tj
0 -1.2 TD
(your procedures and my procedures together and run the resulting program\, you will be asked to specify )Tj
T*
(values regarding the simulated network environment: )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 344.4977 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 344.4977 Tm
(Number of messages to simulate.)Tj
/TT0 1 Tf
( My emulator \(and your routines\) will stop as soon as this )Tj
0 -1.227 TD
(number of messages have been passed down from layer 5, regardless of whe\ther or not all of the )Tj
0 -1.2 TD
(messages have been correctly delivered. Thus, you need )Tj
/TT1 1 Tf
(not)Tj
/TT0 1 Tf
( worry about undelivered or )Tj
0 -1.227 TD
(unACK'ed messages still in your sender when the emulator stops. Note tha\t if you set this value to )Tj
0 -1.2 TD
(1, your program will terminate immediately, before the message is delive\red to the other side. )Tj
T*
(Thus, this value should always be greater than 1. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 234.82 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 234.82 Tm
(Loss.)Tj
/TT0 1 Tf
( You are asked to specify a packet loss probability. A value of 0.1 woul\d mean that one in ten )Tj
0 -1.227 TD
(packets \(on average\) are lost. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 185.4812 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 185.4812 Tm
(Corruption.)Tj
/TT0 1 Tf
( You are asked to specify a packet loss probability. A value of 0.2 woul\d mean that one )Tj
T*
(in five packets \(on average\) are corrupted. Note that the contents of \payload, sequence, ack, or )Tj
0 -1.2 TD
(checksum fields can be corrupted. Your checksum should thus include the \data, sequence, and )Tj
T*
(ack fields. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 106.1423 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 106.1423 Tm
(Tracing.)Tj
/TT0 1 Tf
( Setting a tracing value of 1 or 2 will print out useful information abo\ut what is going on )Tj
0 -1.227 TD
(inside the emulation \(e.g., what's happening to packets and timers\). A\ tracing value of 0 will turn )Tj
0 -1.2 TD
(this off. A tracing value greater than 2 will display all sorts of odd m\essages that are for my own )Tj
T*
(emulator-debugging purposes. A tracing value of 2 may be helpful to you \in debugging your code. )Tj
T*
(You should keep in mind that )Tj
/TT2 1 Tf
(real)Tj
/TT0 1 Tf
( implementors do not have underlying networks that provide such )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 5 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html \(\3 of 6\)2006-12-3 6:35:33)Tj
ET
EMC 

endstreamendobj44 0 obj<</Length 4606>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 778 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Programming Assignment 3: Implementing a Reliable Transport Protocol)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
12.5 0 0 12.5 50 755.3022 Tm
(nice information about what is going to happen to their packets! )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 721.3022 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 721.3022 Tm
(Average time between messages from sender's layer5.)Tj
/TT0 1 Tf
( You can set this value to any non-zero, )Tj
0 -1.227 TD
(positive value. Note that the smaller the value you choose, the faster p\ackets will be be arriving to )Tj
0 -1.2 TD
(your sender. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 653.1586 Tm
(The Alternating-Bit-Protocol Version of this lab.)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 616.8649 Tm
(You are to write the procedures, )Tj
/T1_2 1 Tf
(A_output\(\),A_input\(\),A_timerinterrupt\(\),A_init\(\),)Tj
0 -1.208 TD
(B_input\(\),)Tj
/TT0 1 Tf
( and )Tj
/T1_2 1 Tf
(B_init\(\))Tj
/TT0 1 Tf
( which together will implement a stop-and-wait \(i.e., the alternating b\it )Tj
0 -1.2 TD
(protocol, which we referred to as rdt3.0 in the text\) unidirectional tr\ansfer of data from the A-side to the B-)Tj
T*
(side. )Tj
/TT1 1 Tf
(Your protocol should use both ACK and NACK messages.)Tj
/TT0 1 Tf
( )Tj
0 -2.747 TD
(You should choose a very large value for the average time between messag\es from sender's layer5, so )Tj
0 -1.2 TD
(that your sender is never called while it still has an outstanding, unac\knowledged message it is trying to )Tj
T*
(send to the receiver. I'd suggest you choose a value of 1000. You should\ also perform a check in your )Tj
0 -1.208 TD
(sender to make sure that when )Tj
/T1_2 1 Tf
(A_output\(\))Tj
/TT0 1 Tf
( is called, there is no message currently in transit. If there is, )Tj
T*
(you can simply ignore \(drop\) the data being passed to the )Tj
/T1_2 1 Tf
(A_output\(\))Tj
/TT0 1 Tf
( routine. )Tj
0 -2.72 TD
(You should put your procedures in a file called prog2.c. You will need t\he initial version of this file, )Tj
0 -1.2 TD
(containing the emulation routines we have writen for you, and the stubs \for your procedures. You can )Tj
T*
(obtain this program from )Tj
ET
0 0 0.4 RG
0.6 w 10 M 0 j 0 J []0 d 
148.938 411.431 m
423.375 411.431 l
S
0 0 0.4 rg
BT
/TT0 1 Tf
12.5 0 0 12.5 148.9375 413.2305 Tm
(http://gaia.cs.umass.edu/kurose/transport/prog2.c)Tj
0 0 0 rg
(. )Tj
/TT1 1 Tf
-11.115 -2.88 Td
(This lab can be completed on any machine supporting C. It makes no use o\f UNIX features.)Tj
/TT0 1 Tf
( \(You )Tj
0 -1.227 TD
(can simply  copy the prog2.c file to whatever machine and OS you choose\)\. )Tj
0 -2.72 TD
(We recommend that you should hand in a code listing, a design document, \and sample output. For your )Tj
0 -1.2 TD
(sample output, your procedures might print out a message whenever an eve\nt occurs at your sender or )Tj
T*
(receiver \(a message/packet arrival, or a timer interrupt\) as well as a\ny action taken in response. You might )Tj
T*
(want to hand in output for a run up to the point \(approximately\) when \10 messages have been ACK'ed )Tj
T*
(correctly at the receiver, a loss probability of 0.1, and a corruption p\robability of 0.3, and a trace level of 2. )Tj
T*
(You might want to annotate your printout with a colored pen showing how \your protocol correctly )Tj
T*
(recovered from packet loss and corruption. )Tj
0 -2.72 TD
(Make sure you read the "helpful hints" for this lab following the descri\ption of the Go_Back-N version of )Tj
0 -1.2 TD
(this lab. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 151.087 Tm
(The Go-Back-N version of this lab.)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 114.7932 Tm
(You are to write the procedures, )Tj
/T1_2 1 Tf
(A_output\(\),A_input\(\),A_timerinterrupt\(\),A_init\(\),)Tj
0 -1.208 TD
(B_input\(\),)Tj
/TT0 1 Tf
( and )Tj
/T1_2 1 Tf
(B_init\(\))Tj
/TT0 1 Tf
( which together will implement a Go-Back-N unidirectional transfer of da\ta )Tj
0 -1.2 TD
(from the A-side to the B-side, with a window size of 8. Your protocol sh\ould use both ACK and NACK )Tj
T*
(messages. Consult the alternating-bit-protocol version of this lab above\ for information about how to )Tj
T*
(obtain the network emulator. )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 5 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html \(\4 of 6\)2006-12-3 6:35:33)Tj
ET
EMC 

endstreamendobj45 0 obj<</Length 4659>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 778 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Programming Assignment 3: Implementing a Reliable Transport Protocol)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/TT0 1 Tf
12.5 0 0 12.5 10 750.6947 Tm
(We would )Tj
/TT1 1 Tf
(STRONGLY)Tj
/TT0 1 Tf
( recommend that you first implement the easier lab \(Alternating Bit\) a\nd then )Tj
0 -1.227 TD
(extend your code to implement the harder lab \(Go-Back-N\). Believe me -\ it will )Tj
/TT1 1 Tf
(not)Tj
/TT0 1 Tf
( be time wasted! )Tj
0 -1.227 TD
(However, some new considerations for your Go-Back-N code \(which do not \apply to the Alternating Bit )Tj
0 -1.2 TD
(protocol\) are: )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 670.9185 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 670.9185 Tm
(A_output\(message\), )Tj
/TT0 1 Tf
(where )Tj
/T1_2 1 Tf
(message)Tj
/TT0 1 Tf
( is a structure of type )Tj
/T1_2 1 Tf
(msg,)Tj
/TT0 1 Tf
( containing data to be sent to the )Tj
0 -1.227 TD
(B-side. )Tj
0 -2.72 TD
(Your A_output\(\) routine will now sometimes be called when there are ou\tstanding, )Tj
0 -1.2 TD
(unacknowledged messages in the medium - implying that you will have to b\uffer multiple )Tj
T*
(messages in your sender. Also, you'll also need buffering in your sender\ because of the nature of )Tj
T*
(Go-Back-N: sometimes your sender will be called but it won't be able to \send the new message )Tj
T*
(because the new message falls outside of the window. )Tj
0 -2.72 TD
(Rather than have you worry about buffering an arbitrary number of messag\es, it will be OK for you )Tj
0 -1.2 TD
(to have some finite, maximum number of buffers available at your sender \\(say for 50 messages\) )Tj
T*
(and have your sender simply abort \(give up and exit\) should all 50 buf\fers be in use at one point )Tj
T*
(\(Note: using the values given below, this should never happen!\) In the\ ``real-world,'' of course, one )Tj
T*
(would have to come up with a more elegant solution to the finite buffer \problem! )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 433.5797 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 433.5797 Tm
(A_timerinterrupt\(\) )Tj
/TT0 1 Tf
(This routine will be called when A's timer expires \(thus generating a t\imer )Tj
0 -1.227 TD
(interrupt\). Remember that you've only got one timer, and may have many \outstanding, )Tj
0 -1.2 TD
(unacknowledged packets in the medium, so you'll have to think a bit abou\t how to use this single )Tj
T*
(timer. )Tj
-3.2 -2.72 Td
(Consult the Alternating-bit-protocol version of this lab above for a gen\eral description of what you might )Tj
T*
(want to hand in. You might want to hand in output for a run that was lon\g enough so that at least 20 )Tj
T*
(messages were successfully transfered from sender to receiver \(i.e., th\e sender receives ACK for these )Tj
T*
(messages\) transfers, a loss probability of 0.2, and a corruption probab\ility of 0.2, and a trace level of 2, )Tj
T*
(and a mean time between arrivals of 10. You might want to annotate parts\ of your printout with a colored )Tj
T*
(pen showing how your protocol correctly recovered from packet loss and c\orruption. )Tj
0 -2.72 TD
(For )Tj
/TT1 1 Tf
(extra credit,)Tj
/TT0 1 Tf
( you can implement bidirectional transfer of messages. In this case, ent\ities A and B )Tj
0 -1.227 TD
(operate as both a sender and receiver. You may also piggyback acknowledg\ments on data packets \(or )Tj
0 -1.2 TD
(you can choose not to do so\). To get my emulator to deliver messages fr\om layer 5 to your B_output\(\) )Tj
T*
(routine, you will need to change the declared value of BIDIRECTIONAL fro\m 0 to 1. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 162.0973 Tm
(Helpful Hints and the like)Tj
0 0 0 rg
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 125.902 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 125.902 Tm
(Checksumming.)Tj
/TT0 1 Tf
( You can use whatever approach for checksumming you want. Remember that \)Tj
0 -1.227 TD
(the sequence number and ack field can also be corrupted. We would sugges\t a TCP-like )Tj
0 -1.2 TD
(checksum, which consists of the sum of the \(integer\) sequence and ack \field values, added to a )Tj
T*
(character-by-character sum of the payload field of the packet \(i.e., tr\eat each character as if it were )Tj
T*
(an 8 bit integer and just add them together\). )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 5 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html \(\5 of 6\)2006-12-3 6:35:33)Tj
ET
EMC 

endstreamendobj46 0 obj<</Length 4135>>stream
/Artifact <</Attached [/Top ]/Type /Pagination /BBox [18 778 582 787 ]>>BDC 
0 0 0 rg
0 i 
BT
/T1_0 1 Tf
0 Tc 0 Tw 0  Ts 100  Tz 0 Tr 9 0 0 9 18 780.17 Tm
(Programming Assignment 3: Implementing a Reliable Transport Protocol)Tj
ET
EMC 
/Article <</MCID 0 >>BDC 
q
0 18 612 756 re
W* n
BT
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 755.3022 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
12.5 0 0 12.5 50 755.3022 Tm
(Note that any shared "state" among your routines needs to be in the form\ of global variables. Note )Tj
0 -1.2 TD
(also that any information that your procedures need to save from one inv\ocation to the next must )Tj
T*
(also be a global \(or static\) variable. For example, your routines will\ need to keep a copy of a packet )Tj
T*
(for possible retransmission. It would probably be a good idea for such a\ data structure to be a )Tj
T*
(global variable in your code. Note, however, that if one of your global \variables is used by your )Tj
T*
(sender side, that variable should )Tj
/TT1 1 Tf
(NOT)Tj
/TT0 1 Tf
( be accessed by the receiving side entity, since in real life, )Tj
0 -1.227 TD
(communicating entities connected only by a communication channel can not\ share global )Tj
0 -1.2 TD
(variables. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 615.9634 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
12.5 0 0 12.5 50 615.9634 Tm
(There is a float global variable called )Tj
/TT2 1 Tf
(time)Tj
/TT0 1 Tf
( that you can access from within your code to help you )Tj
0 -1.201 TD
(out with your diagnostics msgs. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 566.9449 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 566.9449 Tm
(START SIMPLE.)Tj
/TT0 1 Tf
( Set the probabilities of loss and corruption to zero and test out your \routines. )Tj
0 -1.227 TD
(Better yet, design and implement your procedures for the case of no loss\ and no corruption, and )Tj
0 -1.2 TD
(get them working first. Then handle the case of one of these probabiliti\es being non-zero, and then )Tj
T*
(finally both being non-zero. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 487.6061 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 487.6061 Tm
(Debugging.)Tj
/TT0 1 Tf
( We'd recommend that you set the tracing level to 2 and put LOTS of prin\tf's in your )Tj
0 -1.227 TD
(code while your debugging your procedures. )Tj
/T1_1 1 Tf
6.25 0 0 6.25 36.3687 438.2672 Tm
(l)Tj
/TT0 1 Tf
(     )Tj
/TT1 1 Tf
12.5 0 0 12.5 50 438.2672 Tm
(Random Numbers. )Tj
/TT0 1 Tf
(The emulator generates packet loss and errors using a random number )Tj
T*
(generator. Our past experience is that random number generators can vary\ widely from one )Tj
0 -1.2 TD
(machine to another. You may need to modify the random number generation \code in the emulator )Tj
T*
(we have suplied you. Our emulation routines have a test to see if the ra\ndom number generator on )Tj
T*
(your machine will work with our code. If you get an error message: )Tj
3.2 -2.72 Td
(It is likely that random number generation on your machine is different \from what this )Tj
T*
(emulator expects. Please take a look at the routine jimsrand\(\) in the \emulator code. )Tj
T*
(Sorry.)Tj
-3.2 -2.72 Td
(then you'll know you'll need to look at how random numbers are generated\ in the routine jimsrand)Tj
T*
(\(\); see the comments in that routine. )Tj
0.655 0.486 0.275 rg
/TT1 1 Tf
17.5 0 0 17.5 10 227.1237 Tm
(Q&A)Tj
0 0 0 rg
/TT0 1 Tf
12.5 0 0 12.5 10 190.9284 Tm
(When we've taught this lab in our introductory neworking course, student\s have posed versious )Tj
T*
(questions.  If you are interested in looking at the questions we've rece\ived \(and answers\), check out )Tj
ET
0 0 0.4 RG
0.6 w 10 M 0 j 0 J []0 d 
564.738 174.128 m
596.012 174.128 l
S
0 0 0.4 rg
BT
/TT0 1 Tf
12.5 0 0 12.5 564.7375 175.9284 Tm
(http://)Tj
ET
10 157.128 m
405.288 157.128 l
S
BT
/TT0 1 Tf
12.5 0 0 12.5 10 158.9284 Tm
(gaia.cs.umass.edu/kurose/transport/programming_assignment_QA.htm)Tj
0 0 0 rg
( )Tj
ET
EMC 
/Artifact <</Attached [/Bottom ]/Type /Pagination /BBox [18 5 582 14 ]>>BDC 
Q
BT
/T1_0 1 Tf
9 0 0 9 18 7.17 Tm
(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html \(\6 of 6\)2006-12-3 6:35:33)Tj
ET
EMC 

endstreamendobj47 0 obj(Programming Assignment 3: Implementing a Reliable Transport Protocol)endobj48 0 obj<</C 52 0 R/V 1.25>>endobj49 0 obj<</URL(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html)/S 50 0 R>>endobj50 0 obj<</G 51 0 R>>endobj51 0 obj<</CB 0/M[10.08 10.08 26.0 36.0]/S 0/PO 0/PS[792.0 612.0]/AH 0/AL 0/SU 1/AS 1/AT 70>>endobj52 0 obj[49 0 R]endobj53 0 obj(http://media.pearsoncmg.com/aw/aw_kurose_network_3/labs/lab5/lab5.html)endobj54 0 obj(Uî· 1†kSﬁRô\\`¸h)endobj55 0 obj<</TS(D:20061203053534)/ID 54 0 R/CT(text/html)/O[11 0 R 17 0 R 19 0 R 21 0 R 25 0 R 27 0 R]/S/SPS/T 47 0 R/TID 57 0 R/SI 56 0 R>>endobj56 0 obj<</TS(D:20061203053534)/AU 53 0 R>>endobj57 0 obj(r¨N+·ØJF_ôïÉ∞)endobj58 0 obj<</IDS 59 0 R/URLS 60 0 R>>endobj59 0 obj<</Names[54 0 R 55 0 R]>>endobj60 0 obj<</Names[53 0 R 55 0 R]>>endobj61 0 obj<</First 62 0 R/Parent 5 0 R/Count 1/Last 62 0 R/Title(pearsoncmg.com)>>endobj62 0 obj<</Parent 61 0 R/Dest[11 0 R/XYZ 0 792 null]/SE 10 0 R/Title(Programming Assignment 3: Implementing a Reliable Transport Protocol)>>endobj63 0 obj<</Subtype/XML/Length 3442/Type/Metadata>>stream
<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:ModifyDate>2006-12-03T06:35:34+01:00</xap:ModifyDate>
         <xap:CreateDate>2006-12-03T06:35:33+01:00</xap:CreateDate>
         <xap:MetadataDate>2006-12-03T06:35:34+01:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/pdf</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Programming Assignment 3: Implementing a Reliable Transport Protocol</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:dcbabae7-f138-4bd7-9587-96a60aca0d54</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4a4f7cda-ea5d-4486-a75b-48c08a514694</xapMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Acrobat Web Capture 7.0</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
endstreamendobjxref
0 64
0000000004 00000 f
0000000016 00000 n
0000000143 00000 n
0000000229 00000 n
0000000006 00000 f
0000000429 00000 n
0000000000 00001 f
0000000495 00000 n
0000000595 00000 n
0000000639 00000 n
0000000686 00000 n
0000000903 00000 n
0000001131 00000 n
0000001211 00000 n
0000001235 00000 n
0000001437 00000 n
0000001468 00000 n
0000001667 00000 n
0000001893 00000 n
0000001917 00000 n
0000002143 00000 n
0000002167 00000 n
0000002396 00000 n
0000002420 00000 n
0000002599 00000 n
0000002623 00000 n
0000002838 00000 n
0000002862 00000 n
0000003090 00000 n
0000003114 00000 n
0000003315 00000 n
0000003346 00000 n
0000003544 00000 n
0000003634 00000 n
0000004807 00000 n
0000005027 00000 n
0000006204 00000 n
0000006430 00000 n
0000007610 00000 n
0000007837 00000 n
0000007923 00000 n
0000011902 00000 n
0000011968 00000 n
0000016988 00000 n
0000022300 00000 n
0000026957 00000 n
0000031667 00000 n
0000035853 00000 n
0000035939 00000 n
0000035975 00000 n
0000036080 00000 n
0000036109 00000 n
0000036210 00000 n
0000036234 00000 n
0000036322 00000 n
0000036357 00000 n
0000036503 00000 n
0000036554 00000 n
0000036588 00000 n
0000036631 00000 n
0000036672 00000 n
0000036713 00000 n
0000036801 00000 n
0000036949 00000 n
trailer
<</Size 64/Root 1 0 R/Info 3 0 R/ID[<41644A86B2EC4147A552BE22B7E8D5FD><C58D6D7EF0B49D4CBFF4B831D23F578C>]>>
startxref
40468
%%EOF
